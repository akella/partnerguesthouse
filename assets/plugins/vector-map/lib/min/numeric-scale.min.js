jvm.NumericScale=function(t,e,i,n){this.scale=[],e=e||"linear",t&&this.setScale(t),e&&this.setNormalizeFunction(e),i&&this.setMin(i),n&&this.setMax(n)},jvm.NumericScale.prototype={setMin:function(t){this.clearMinValue=t,this.minValue="function"==typeof this.normalize?this.normalize(t):t},setMax:function(t){this.clearMaxValue=t,this.maxValue="function"==typeof this.normalize?this.normalize(t):t},setScale:function(t){var e;for(e=0;e<t.length;e++)this.scale[e]=[t[e]]},setNormalizeFunction:function(t){"polynomial"===t?this.normalize=function(t){return Math.pow(t,.2)}:"linear"===t?delete this.normalize:this.normalize=t,this.setMin(this.clearMinValue),this.setMax(this.clearMaxValue)},getValue:function(t){var e,i,n=[],r=0,a=0;for("function"==typeof this.normalize&&(t=this.normalize(t)),a=0;a<this.scale.length-1;a++)e=this.vectorLength(this.vectorSubtract(this.scale[a+1],this.scale[a])),n.push(e),r+=e;for(i=(this.maxValue-this.minValue)/r,a=0;a<n.length;a++)n[a]*=i;for(a=0,t-=this.minValue;t-n[a]>=0;)t-=n[a],a++;return t=a==this.scale.length-1?this.vectorToNum(this.scale[a]):this.vectorToNum(this.vectorAdd(this.scale[a],this.vectorMult(this.vectorSubtract(this.scale[a+1],this.scale[a]),t/n[a])))},vectorToNum:function(t){var e,i=0;for(e=0;e<t.length;e++)i+=Math.round(t[e])*Math.pow(256,t.length-e-1);return i},vectorSubtract:function(t,e){var i,n=[];for(i=0;i<t.length;i++)n[i]=t[i]-e[i];return n},vectorAdd:function(t,e){var i,n=[];for(i=0;i<t.length;i++)n[i]=t[i]+e[i];return n},vectorMult:function(t,e){var i,n=[];for(i=0;i<t.length;i++)n[i]=t[i]*e;return n},vectorLength:function(t){var e,i=0;for(e=0;e<t.length;e++)i+=t[e]*t[e];return Math.sqrt(i)}};